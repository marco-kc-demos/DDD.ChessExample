using DDD.Core.Application.EventStoreModels;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics.CodeAnalysis;

namespace DDD.Core.Application
{
    public abstract class EventStoreContext<TId,TRoot> : DbContext
                where TRoot : AggregateRoot<TId>
    {
        public string AggregateName { get; }
        public bool IdMustBeGeneratedHere { get; }

        /// <summary>
        /// Base class constructor for EventStoreContext.
        /// </summary>
        /// <param name="keyShouldBeAutoGenerated">whether the id of the Aggregate Root should be generated by the database.
        /// (i.e. should the key be generated here, or is it generated somewhere else?)</param>
        /// <param name="options"></param>
        public EventStoreContext(bool idMustBeGeneratedHere, DbContextOptions options) : base(options)
        {
            AggregateName = typeof(TRoot).Name;
            IdMustBeGeneratedHere = idMustBeGeneratedHere;
        }

        public DbSet<RootModel<TId>> AggregateRoots { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //
            //  Configure table mapping for the Aggregate Root object
            //
            var rootModel = modelBuilder.Entity<RootModel<TId>>();
            rootModel.ToTable($"{AggregateName}s");
            if (IdMustBeGeneratedHere)
            {
                rootModel.Property(rm => rm.Id).ValueGeneratedOnAdd();
            }
            else
            {
                rootModel.Property(rm => rm.Id).ValueGeneratedNever();
            }
            rootModel.HasMany(rm => rm.Events).WithOne().HasForeignKey($"{AggregateName}Id");


            //
            //  Configure table mapping for the Event objects
            //
            var eventModel = modelBuilder.Entity<EventModel>();
            eventModel.ToTable($"{AggregateName}Events");
            eventModel.Property<TId>($"{AggregateName}Id");    // shadow property to give a name to the foreign key
            eventModel.Property(e => e.EventType).IsRequired().HasColumnType("nvarchar(255)");
            eventModel.Property(e => e.EventData).IsRequired().HasColumnType("nvarchar(4000)");


            base.OnModelCreating(modelBuilder);
        }
    }
}